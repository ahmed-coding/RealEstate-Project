openapi: 3.0.3
info:
  title: ' API Documentation for RealEstate '
  version: 1.0.0
  description: RealEstate project description
paths:
  /api/address/{id}/update/:
    put:
      operationId: api_address_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAddress'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAddress'
          description: ''
    patch:
      operationId: api_address_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCreateAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCreateAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCreateAddress'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAddress'
          description: ''
  /api/address/city/:
    get:
      operationId: api_address_city_list
      description: |-
        CityViewsets

        Argament:
            country: country id to get all City in `GET Method`
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CitySerializers'
          description: ''
  /api/address/country/:
    get:
      operationId: api_address_country_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountrySerializers'
          description: ''
  /api/address/state/:
    get:
      operationId: api_address_state_list
      description: |-
        StateViewsets

        Argament:
            city: city id to get all State in `GET Method`
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StateSerializers'
          description: ''
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/auth/sginup/:
    post:
      operationId: api_auth_sginup_create
      description: |-
        Reigster User View to signup after verify the ``email`` or ``phone number`` (just email for new).
        Returns:
        - in_Success:
            - data: (``string``) -> message from server.
            - user: (``User``) -> data of user after created.
            - status_code : 200
        - in_Fail:
            - error: (``string``) -> Error Message.
            - status: 401 when come bafore verify the ``email`` or ``phone_number``.
            - status: 400 when data isn't correct or somthing go to by wrong.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuth'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAuth'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAuth'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuth'
          description: ''
  /api/categorie/:
    get:
      operationId: api_categorie_list
      description: |-
        CategoryViewsets

        Argament:
            parent: parent id to get all sup Categorie in `GET Method`
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategorySerializersList'
          description: ''
  /api/categorie/attributes/:
    get:
      operationId: api_categorie_attributes_list
      description: |-
        AttributeByCategorieViewsets

        Argament:
            category: categorie id to get all attribute in `GET Method`
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttributeSerializers'
          description: ''
  /api/image/{id}/delete/:
    delete:
      operationId: api_image_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/image/{id}/update/:
    put:
      operationId: api_image_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image_Serializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image_Serializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image_Serializers'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image_Serializers'
          description: ''
    patch:
      operationId: api_image_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedImage_Serializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImage_Serializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImage_Serializers'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image_Serializers'
          description: ''
  /api/property/:
    get:
      operationId: api_property_list
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSinglePropertySerializersList'
          description: ''
  /api/property/{pkprop}/reviews/:
    get:
      operationId: api_property_reviews_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: pkprop
        schema:
          type: integer
        required: true
      - in: query
        name: prop
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewSerializersList'
          description: ''
  /api/property/{id}/:
    get:
      operationId: api_property_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDetailsSerializers'
          description: ''
  /api/property/{id}/by-address/:
    get:
      operationId: api_property_by_address_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePropertySerializers'
          description: ''
  /api/property/create/:
    post:
      operationId: api_property_create_create
      description: |-
        API view class for creating a new property along with address and images.

        This view class provides an endpoint for creating a new property along with associated address and images.

        Example Usage:
            To create a property with address, features, and images:
            ```
            {

            "category": 1,
            "name": "Property Name",
            "description": "Property Description",
            "price": 100000,
            "size": 2000,
            "is_active": true,
            "is_deleted": false,
            "attribute_values": {
                "1": "Value1",
                "2": "Value2",
                "3": "Value3"
            },
            "address": {
                "state": 1,
                "longitude": "20.354654",
                "latitude": "32.354654"
            },
            "feature_data": [
                {
                    "id": 1,
                    "images": [
                        {
                            "image": "image_data"
                        },
                        {
                            "image": "image_data"
                        }
                    ]
                },
                {
                    "id": 2,
                    "images": [
                        {
                            "image": "image_data"
                        },
                        {
                            "image": "image_data"
                        }
                    ]
                }
            ],
            "image_data": [
                {
                    "image": "image_data"
                },
                {
                    "image": "image_data"
                }
            ],
            "for_sale": true
        }
            ```

        Note:
            Ensure that the user and `category` IDs provided exist in the database.
            Ensure that the attribute IDs provided in `attribute_values` exist in the database.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProperty'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateProperty'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateProperty'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProperty'
          description: ''
  /api/property/high-rate/:
    get:
      operationId: api_property_high_rate_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePropertySerializers'
          description: ''
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/ticket/create/:
    post:
      operationId: api_ticket_create_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TicketSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TicketSerializers'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketSerializers'
          description: ''
  /api/ticket/ticket-type/:
    get:
      operationId: api_ticket_ticket_type_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTypeSerilalizers'
          description: ''
  /api/user/favorite/:
    get:
      operationId: api_user_favorite_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: prop
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFavoriteSerializersList'
          description: ''
  /api/user/favorite/{prop_id}/delete/:
    delete:
      operationId: api_user_favorite_delete_destroy
      parameters:
      - in: path
        name: prop_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/user/favorite/create/:
    post:
      operationId: api_user_favorite_create_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFavoriteSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateFavoriteSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFavoriteSerializers'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFavoriteSerializers'
          description: ''
  /api/user/favorite/delete-all/:
    post:
      operationId: api_user_favorite_delete_all_create
      description: |-
        _summary_

        Args:
            request (_type_): _description_

        Returns:
            _type_: _description_
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FavoriteSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FavoriteSerializers'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSerializers'
          description: ''
  /api/user/favorite/delete-list/:
    post:
      operationId: api_user_favorite_delete_list_create
      description: |-
        _summary_

        Args:
            request (_type_): _description_

        Returns:
            _type_: _description_
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteSerializers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FavoriteSerializers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FavoriteSerializers'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteSerializers'
          description: ''
  /api/user/profile/:
    get:
      operationId: api_user_profile_list
      description: |-
        _summary_

        Args:
            viewsets (_type_): _description_

        Returns:
            _type_: _description_
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/user/profile/update/:
    put:
      operationId: api_user_profile_update_update
      description: |-
        _summary_

        Args:
            viewsets (_type_): _description_
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: ''
    patch:
      operationId: api_user_profile_update_partial_update
      description: |-
        _summary_

        Args:
            viewsets (_type_): _description_
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUpdateUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateUser'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser'
          description: ''
components:
  schemas:
    AddressSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        state:
          allOf:
          - $ref: '#/components/schemas/StateSerializers'
          readOnly: true
        longitude:
          type: string
          maxLength: 50
        latitude:
          type: string
          maxLength: 50
      required:
      - id
      - latitude
      - longitude
      - state
    AttributeSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value_attribute:
          type: array
          items:
            $ref: '#/components/schemas/ValueModelSerializers'
          readOnly: true
        name:
          type: string
          maxLength: 50
        data_type:
          $ref: '#/components/schemas/DataTypeEnum'
      required:
      - data_type
      - id
      - name
      - value_attribute
    AttributeVlaueSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        data_type:
          $ref: '#/components/schemas/DataTypeEnum'
      required:
      - data_type
      - id
      - name
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    CategorySerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: array
          items:
            $ref: '#/components/schemas/Image_Serializers'
          readOnly: true
        have_children:
          type: boolean
          readOnly: true
        name:
          type: string
          maxLength: 50
        lft:
          type: integer
          readOnly: true
        rght:
          type: integer
          readOnly: true
        tree_id:
          type: integer
          readOnly: true
        level:
          type: integer
          readOnly: true
        parent:
          type: integer
          nullable: true
      required:
      - have_children
      - id
      - image
      - level
      - lft
      - name
      - rght
      - tree_id
    CitySerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        state:
          type: array
          items:
            $ref: '#/components/schemas/StateSerializers'
          readOnly: true
        name:
          type: string
          maxLength: 50
        country:
          type: integer
      required:
      - country
      - id
      - name
      - state
    CountrySerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        city:
          type: array
          items:
            $ref: '#/components/schemas/CitySerializers'
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - city
      - id
      - name
    CreateAddress:
      type: object
      description: |-
        Serializer class for creating a new address.

        This serializer allows creating a new address.

        Example Usage:
            To create an address:
            ```
            {
                "state": 1,
                "longitude": "longitude_value",
                "latitude": "latitude_value"
            }
            ```
      properties:
        id:
          type: integer
          readOnly: true
        longitude:
          type: string
          maxLength: 50
        latitude:
          type: string
          maxLength: 50
        state:
          type: integer
      required:
      - id
      - latitude
      - longitude
      - state
    CreateFavoriteSerializers:
      type: object
      properties:
        prop:
          type: integer
      required:
      - prop
    CreateProperty:
      type: object
      description: |-
        Serializer class for creating a new property along with associated address, features, and images.

        This serializer allows creating a new property along with an address, features, and images in a single request.

        Attributes:
            address_data (dict): A dictionary containing address details.
            feature_data (list): A list of dictionaries containing feature details.
            attribute_values (dict): A dictionary containing attribute IDs as keys and their corresponding values.
            image_data (list): A list of dictionaries containing image details.


        Example Usage:
            To create a property with address, features, and images:
            ```
        {

            "category": 1,
            "name": "Property Name",
            "description": "Property Description",
            "price": 100000,
            "size": 2000,
            "is_active": true,
            "is_deleted": false,
            "attribute_values": {
                "1": "Value1",
                "2": "Value2",
                "3": "Value3"
            },
            "address": {
                "state": 1,
                "longitude": "20.354654",
                "latitude": "32.354654"
            },
            "feature_data": [
                {
                    "id": 1,
                    "images": [
                        {
                            "image": "image_data"
                        },
                        {
                            "image": "image_data"
                        }
                    ]
                },
                {
                    "id": 2,
                    "images": [
                        {
                            "image": "image_data"
                        },
                        {
                            "image": "image_data"
                        }
                    ]
                }
            ],
            "image_data": [
                {
                    "image": "image_data"
                },
                {
                    "image": "image_data"
                }
            ],
            "for_sale": true
        }

            ```

        Note:
            Ensure that the user and `category` IDs provided exist in the database.
            Ensure that the attribute IDs provided in `attribute_values` exist in the database.
      properties:
        id:
          type: integer
          readOnly: true
        attribute_values:
          type: object
          additionalProperties: {}
          writeOnly: true
        address:
          $ref: '#/components/schemas/CreateAddress'
        feature_data:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
        image_data:
          type: array
          items:
            type: object
            additionalProperties: {}
          writeOnly: true
        name:
          type: string
          maxLength: 50
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        size:
          type: integer
        is_active:
          type: boolean
        is_deleted:
          type: boolean
        time_created:
          type: string
          format: date-time
          readOnly: true
        unique_number:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        for_sale:
          type: boolean
          title: Is For sale
        category:
          type: integer
      required:
      - address
      - attribute_values
      - category
      - description
      - feature_data
      - id
      - image_data
      - name
      - size
      - time_created
      - unique_number
    DataTypeEnum:
      enum:
      - string
      - int
      - char
      - bool
      - date
      - float
      type: string
    FavoriteSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        prop:
          allOf:
          - $ref: '#/components/schemas/SinglePropertySerializers'
          readOnly: true
        time_created:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - prop
      - time_created
    FeatureSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Feature Name
          maxLength: 50
      required:
      - id
      - name
    Feature_propertySerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        feature:
          allOf:
          - $ref: '#/components/schemas/FeatureSerializers'
          readOnly: true
        image:
          type: array
          items:
            $ref: '#/components/schemas/Image_Serializers'
          readOnly: true
        property:
          type: integer
      required:
      - feature
      - id
      - image
      - property
    Image_Serializers:
      type: object
      properties:
        image:
          type: string
          format: uri
        id:
          type: integer
          readOnly: true
      required:
      - id
      - image
    PaginatedCategorySerializersList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CategorySerializers'
    PaginatedFavoriteSerializersList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FavoriteSerializers'
    PaginatedReviewSerializersList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReviewSerializers'
    PaginatedSinglePropertySerializersList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SinglePropertySerializers'
    PatchedCreateAddress:
      type: object
      description: |-
        Serializer class for creating a new address.

        This serializer allows creating a new address.

        Example Usage:
            To create an address:
            ```
            {
                "state": 1,
                "longitude": "longitude_value",
                "latitude": "latitude_value"
            }
            ```
      properties:
        id:
          type: integer
          readOnly: true
        longitude:
          type: string
          maxLength: 50
        latitude:
          type: string
          maxLength: 50
        state:
          type: integer
    PatchedImage_Serializers:
      type: object
      properties:
        image:
          type: string
          format: uri
        id:
          type: integer
          readOnly: true
    PatchedUpdateUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
        phone_number:
          type: string
        username:
          type: string
        name:
          type: string
        register_data:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
    PropertyDetailsSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        feature_property:
          type: array
          items:
            $ref: '#/components/schemas/Feature_propertySerializers'
          readOnly: true
        property_value:
          type: array
          items:
            $ref: '#/components/schemas/property_valueSerializers'
          readOnly: true
        rate:
          type: number
          format: double
          readOnly: true
        in_favorite:
          type: boolean
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/AddressSerializers'
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/CategorySerializers'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        image:
          type: array
          items:
            $ref: '#/components/schemas/Image_Serializers'
          readOnly: true
        name:
          type: string
          maxLength: 50
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        size:
          type: integer
        is_active:
          type: boolean
        is_deleted:
          type: boolean
        time_created:
          type: string
          format: date-time
          readOnly: true
        unique_number:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        for_sale:
          type: boolean
          title: Is For sale
      required:
      - address
      - category
      - description
      - feature_property
      - id
      - image
      - in_favorite
      - name
      - property_value
      - rate
      - size
      - time_created
      - unique_number
      - user
    ReviewSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        time_created:
          type: string
          format: date-time
          readOnly: true
        review:
          type: string
          title: Note
        prop:
          type: integer
          title: Property
      required:
      - id
      - prop
      - review
      - time_created
      - user
    SinglePropertySerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rate:
          type: number
          format: double
          readOnly: true
        in_favorite:
          type: boolean
          readOnly: true
        image:
          type: array
          items:
            $ref: '#/components/schemas/Image_Serializers'
          readOnly: true
        name:
          type: string
          maxLength: 50
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        size:
          type: integer
        is_active:
          type: boolean
        is_deleted:
          type: boolean
        time_created:
          type: string
          format: date-time
          readOnly: true
        unique_number:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        for_sale:
          type: boolean
          title: Is For sale
        user:
          type: integer
        category:
          type: integer
        address:
          type: integer
          nullable: true
      required:
      - category
      - description
      - id
      - image
      - in_favorite
      - name
      - rate
      - size
      - time_created
      - unique_number
      - user
    StateSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        city:
          type: integer
      required:
      - city
      - id
      - name
    TicketSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        phone_number:
          type: string
          maxLength: 50
        created_time:
          type: string
          format: date-time
          readOnly: true
        solved_time:
          type: string
          format: date-time
        email:
          type: string
          format: email
          maxLength: 254
        problem_text:
          type: string
        type:
          type: integer
        status:
          type: integer
          nullable: true
          title: Ticket_status
        ticket_solver:
          type: integer
          nullable: true
          title: Solver
        ticket_sender:
          type: integer
          title: Sender
      required:
      - created_time
      - email
      - id
      - phone_number
      - problem_text
      - solved_time
      - ticket_sender
      - type
    TicketTypeSerilalizers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          type: string
          maxLength: 50
      required:
      - id
      - type
    UpdateUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
        phone_number:
          type: string
        username:
          type: string
        name:
          type: string
        register_data:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
      required:
      - email
      - id
      - image
      - name
      - phone_number
      - register_data
      - username
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone_number:
          type: string
          nullable: true
          maxLength: 50
        username:
          type: string
          nullable: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        password:
          type: string
          writeOnly: true
        name:
          type: string
          title: Full name
          maxLength: 60
        register_data:
          type: string
          maxLength: 20
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        image:
          type: string
          format: uri
          nullable: true
        is_deleted:
          type: boolean
          title: Deleted
      required:
      - email
      - id
      - password
    UserAuth:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone_number:
          type: string
          nullable: true
          maxLength: 50
        username:
          type: string
          nullable: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        password:
          type: string
          writeOnly: true
        name:
          type: string
          title: Full name
          maxLength: 60
        image:
          type: string
          format: uri
          nullable: true
        user_auth:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - email
      - id
      - password
      - user_auth
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        phone_number:
          type: string
          nullable: true
          maxLength: 50
        username:
          type: string
          nullable: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        name:
          type: string
          title: Full name
          maxLength: 60
        register_data:
          type: string
          maxLength: 20
        image:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - id
    ValueModelSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: string
          maxLength: 50
        attribute:
          type: integer
      required:
      - attribute
      - id
      - value
    ValueSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        attribute:
          allOf:
          - $ref: '#/components/schemas/AttributeVlaueSerializers'
          readOnly: true
        value:
          type: string
          maxLength: 50
      required:
      - attribute
      - id
      - value
    property_valueSerializers:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          allOf:
          - $ref: '#/components/schemas/ValueSerializers'
          readOnly: true
        property:
          type: integer
      required:
      - id
      - property
      - value
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
